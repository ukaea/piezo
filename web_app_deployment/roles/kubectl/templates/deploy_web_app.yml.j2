apiVersion: apps/v1
kind: Deployment
metadata:
  name: piezo-web-app
  labels:
    run: piezo
spec:
  replicas: 1
  selector:
    matchLabels:
      run: piezo
  template:
    metadata:
      labels:
        run: piezo
    spec:
      containers:
      - name: piezo
        image: {{ harbor_url }}/piezo-resources/web_app:{{ git_tag }}
        imagePullPolicy: Always
        ports:
        - containerPort: 8888 # Port where the application is exposed on
        volumeMounts:
        - name: {{ secrets_name }}
          mountPath: "/etc/secrets/"
        - name: validation-rules
          mountPath: "/etc/configs/"
      volumes:
      - name: {{ secrets_name }}
        secret:
          secretName: {{ secrets_name }}
          items:
          - key: accessKey
            path: access_key
          - key: secretKey
            path: secret_key
      - name: validation-rules
        configMap:
          name: validation-rules
          items:
          - key: validation_rules.json
            path: validation_rules.json
---
kind: Service
apiVersion: v1
metadata:
  name: piezo-app-service
  namespace: default
  labels:
    piezo-status: test
spec:
  selector:
    run: piezo
  ports:
  - name: web
    port: 8888 # Port where the application is exposed on in the container (to be picked up by ingress)
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  name: piezo-ingress
spec:
  rules:
    - host: {{ k8s_master_url }}
      http:
        paths:
          - backend:
              serviceName: piezo-app-service
              servicePort: web
            path: /piezo/
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  name: prometheus-ingress
spec:
  rules:
    - host: {{ k8s_master_url }}  # Node where ingress controller is run (kuberenetes master)
      http:
        paths:
          - backend:
              serviceName: piezo-monitor-prometheus-o-prometheus
              servicePort: web
            path: /prometheus/
          - backend:
              serviceName: piezo-monitor-grafana
              servicePort: service
            path: /
---
kind: Service
apiVersion: v1
metadata:
  name: spark-pods-service
  namespace: default
  labels:
    spark-role: monitor
spec:
  selector:
    version: 2.4.0
  ports:
  - name: web
    port: 8090  # Default metrics port for prometheus (DO NOT CHANGE)
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: spark-pods-service-monitor
  labels:
    release: piezo-monitor # What is matched by the prometheus crd def (kubectl get prometheus -o yaml --all-namespaces)
spec:
  endpoints:
  - port: web
  selector:
    spark-role: monitor
---
kind: Service
apiVersion: v1
metadata:
  name: spark-operator-service
  namespace: spark-operator
  labels:
    spark-role: monitor
spec:
  selector:
    app.kubernetes.io/name: sparkoperator
  ports:
  - name: web
    port: 10254  # Default metrics port for spark operator (DO NOT CHANGE)
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: spark-operator-service-monitor
  labels:
    release: piezo-monitor # What is matched by the prometheus crd def (kubectl get prometheus -o yaml --all-namespaces)
spec:
  endpoints:
  - port: web
  namespaceSelector:
    matchNames:
    - spark-operator
  selector:
    spark-role: monitor
